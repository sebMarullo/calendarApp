{
  "_args": [
    [
      {
        "raw": "css-to-string-loader",
        "scope": null,
        "escapedName": "css-to-string-loader",
        "name": "css-to-string-loader",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\sebastian\\Desktop\\MyShop\\Shops\\calendarApp"
    ]
  ],
  "_from": "css-to-string-loader@latest",
  "_id": "css-to-string-loader@0.1.2",
  "_inCache": true,
  "_location": "/css-to-string-loader",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/css-to-string-loader-0.1.2.tgz_1475677785760_0.22698984341695905"
  },
  "_npmUser": {
    "name": "smithad15",
    "email": "smithad15@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "css-to-string-loader",
    "scope": null,
    "escapedName": "css-to-string-loader",
    "name": "css-to-string-loader",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/css-to-string-loader/-/css-to-string-loader-0.1.2.tgz",
  "_shasum": "b7ff01dd78fbbde698b85995523f611bea276809",
  "_shrinkwrap": null,
  "_spec": "css-to-string-loader",
  "_where": "C:\\Users\\sebastian\\Desktop\\MyShop\\Shops\\calendarApp",
  "author": {
    "name": "Andrew Smith"
  },
  "bugs": {
    "url": "https://github.com/smithad15/css-to-string-loader/issues"
  },
  "dependencies": {
    "loader-utils": "^0.2.15"
  },
  "description": "Webpack loader to convert the output of the css-loader back to a string",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "b7ff01dd78fbbde698b85995523f611bea276809",
    "tarball": "https://registry.npmjs.org/css-to-string-loader/-/css-to-string-loader-0.1.2.tgz"
  },
  "gitHead": "66528e5229a65f6f1cc1a7c5fffa1abe07954b6f",
  "homepage": "https://github.com/smithad15/css-to-string-loader#readme",
  "keywords": [
    "webpack",
    "css-loader",
    "Angular2"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "smithad15",
      "email": "smithad15@gmail.com"
    }
  ],
  "name": "css-to-string-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "css-loader": "^0.25.0"
  },
  "readme": "# css-to-string-loader for webpack\n\nA simple webpack loader to convert the output of the [css-loader](https://github.com/webpack/css-loader) back to a string.\n\nThis is quite useful for situations where you want webpack to process all of your `@import` and `url()` statements in your stylesheets but still receive the styles in string format for further use in your code base.\n\n\n## Install\n\n```\nnpm install css-to-string-loader --save-dev\n```\n\n\n## Usage\n\n[General webpack loader usage](http://webpack.github.io/docs/using-loaders.html)\n\n### Require Statement\n\n``` javascript\nvar styleString = require('css-to-string-loader!css-loader!./file.css');\n```\n\n### Webpack Config\n``` javascript\n{\n  ...\n  module: {\n    loaders: [\n      { test: /\\.css$/, loader: 'css-to-string-loader!css-loader' }\n    ]\n  }\n}\n```\n\n\n## Angular 2 Component Styling\n\nThis loader was originally created to be used with Angular 2 component styling. The styles array in the component decorator expects an array of strings and the [css-loader](https://github.com/webpack/css-loader) outputs its own custom array object. A common solution was to use the [raw-loader](https://github.com/webpack/raw-loader) to take CSS files or the output of [sass-loader](https://github.com/jtangelder/sass-loader) and convert it to a string. These solutions did not allow for processing of nested resources such as images and font files with minification, cache-busting hashes, or inlining with the [url-loader](https://github.com/webpack/url-loader).\n\n``` javascript\n// Angular 2 Component\n\n@Component({\n  ...\n  styles: [require('./component.scss')],\n  ...\n})\n\n// Webpack Config\n\n{\n  module: {\n    loaders: [\n      { test: /\\.scss/, loader: 'css-to-string-loader!css-loader!sass-loader'}\n    ]\n  }\n}\n```\n\n## .toString()\n\nIt is also possible to achieve the same result as this loader by calling the custom `.toString()` method implementation on the returned value of the [css-loader](https://github.com/webpack/css-loader). In fact, that is really all this loader does for you. However, by adding this into your loader chain, you don't have to worry about having to write it every time.\n\n\n## License\n\n[MIT (http://www.opensource.org/licenses/mit-license.php)](http://www.opensource.org/licenses/mit-license.php)",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/smithad15/css-to-string-loader.git"
  },
  "scripts": {},
  "version": "0.1.2"
}
