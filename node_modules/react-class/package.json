{
  "_args": [
    [
      {
        "raw": "react-class@2.0.0",
        "scope": null,
        "escapedName": "react-class",
        "name": "react-class",
        "rawSpec": "2.0.0",
        "spec": "2.0.0",
        "type": "version"
      },
      "C:\\Users\\sebastian\\Desktop\\MyShop\\Shops\\calendarApp\\node_modules\\react-date-picker"
    ]
  ],
  "_from": "react-class@2.0.0",
  "_id": "react-class@2.0.0",
  "_inCache": true,
  "_location": "/react-class",
  "_nodeVersion": "4.2.3",
  "_npmUser": {
    "name": "zippyui",
    "email": "contact@zippyui.com"
  },
  "_npmVersion": "2.14.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-class@2.0.0",
    "scope": null,
    "escapedName": "react-class",
    "name": "react-class",
    "rawSpec": "2.0.0",
    "spec": "2.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/react-date-picker",
    "/react-flex",
    "/react-notify-resize"
  ],
  "_resolved": "https://registry.npmjs.org/react-class/-/react-class-2.0.0.tgz",
  "_shasum": "5a52fdc15d4d99738ebf2bf69db374ce82737797",
  "_shrinkwrap": null,
  "_spec": "react-class@2.0.0",
  "_where": "C:\\Users\\sebastian\\Desktop\\MyShop\\Shops\\calendarApp\\node_modules\\react-date-picker",
  "author": {
    "name": "Zippy Technologies"
  },
  "bugs": {
    "url": "https://github.com/zippyui/react-class/issues"
  },
  "dependencies": {
    "object-assign": "^4.0.1"
  },
  "description": "A carefully crafted base class for all your React components ",
  "devDependencies": {
    "babel-core": "^5.6.15",
    "babel-loader": "^5.2.2",
    "gulp": "^3.9.0",
    "gulp-babel": "^5.1.0",
    "node-libs-browser": "^0.5.2",
    "webpack": "^1.9.13",
    "webpack-dev-server": "^1.9.0"
  },
  "directories": {},
  "dist": {
    "shasum": "5a52fdc15d4d99738ebf2bf69db374ce82737797",
    "tarball": "https://registry.npmjs.org/react-class/-/react-class-2.0.0.tgz"
  },
  "gitHead": "366cabf2b22312a73a940d04360e27c396d1eba7",
  "homepage": "https://github.com/zippyui/react-class",
  "keywords": [
    "react",
    "class",
    "component",
    "react-component",
    "base",
    "bind"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "zippyui",
      "email": "contact@zippyui.com"
    }
  ],
  "name": "react-class",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=0.14.0"
  },
  "readme": "# react-class\n\n> A carefully crafted base class for all your React components\n\n## Features\n\n * auto-bind methods\n * avoid boilerplate with default style and default class name\n\n## Install\n\n```sh\n$ npm install react-class --save\n```\n\n## Usage\n\nInstead of extending `React.Component` you have to extend the class exported by `react-class`.\n\n```jsx\nimport Component from 'react-class'\n\nclass MyApp extends Component {\n\n  render(){\n    // you have to call prepareProps in order to get defaultClassName\n    // and defaultStyle applied to props\n    var props = this.prepareProps(this.props)\n\n    return <div {...props} onClick={this.onClick}>\n      //onClick is auto-bound to \"this\", so you can keep your code dry\n    </div>\n  }\n\n  onClick(){\n    console.log(this)\n  }\n}\n\nMyApp.defaultProps = {\n  defaultStyle: {\n    border: '2px solid red'\n  },\n  defaultClassName: 'myapp'\n}\n```\n\nSo you can use `<MyApp style={{color: 'blue'}} className=\"main\" />` and get `defaultProps.defaultClassName` always applied to your component and `defaultProps.defaultStyle` merged into `props.style`. Of course, any colliding style you specify in `props.style` will override the one in `defaultProps.defaultStyle`\n\nThe result of\n\n```jsx\n<MyApp style={{color: 'blue'}} className=\"main\" />\n```\nis a div with the following:\n```html\n<div style=\"color: blue; border: 2px solid red\" class=\"myapp main\">\n</div>\n```\n\n## prepareProps\n\nTo get `defaultProps.defaultStyle` and `defaultProps.defaultClassName` applied on the props object, remember to call **prepareProps**\n\n```js\nvar props = this.prepareProps(this.props)\n```\n\nAll it does is the following:\n\n```jsx\nfunction prepareProps(thisProps){\n  var props = assign({}, thisProps)\n\n  props.style = assign({},\n                this.contructor.defaultProps.defaultStyle, props.style\n              )\n  props.className = (props.className || '') + ' ' +\n                (this.constructor.defaultProps.defaultClassName || '')\n\n  return props\n}\n```\n\n## auto-binding\n\nIn order to get autobinding, just extend the class exported by `react-class`\n\n```jsx\n\nvar ReactClass = require('react-class');\n\nclass App extends ReactClass { ... }\n```\n\n\n## FAQ\n\n### What problems does it solve?\n\nGenerally you want your components to have a default style (of course, which can be overriden).\n\nVery often you also want a default `className` to be applied all the time to your components, no matter if the user of your components passes a `className` attribute or not in the props.\n\nAlso, autobinding is a nice feature!\n\n### What if I want to remove it in the future?\n\n`react-class` is a very thin layer around `React.Component`, so just in case you decide removing it in the future, you'll be safe and will only have to do very minor code changes.\n\nWe're not doing anything magical!\n\n\n## LICENSE\n\n#### MIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zippyui/react-class.git"
  },
  "scripts": {
    "build": "npm run dist && npm run lib",
    "dev": "webpack-dev-server --progress --colors --port 8080 --config ./build/dev.config.js",
    "dist": "webpack -p --progress --colors --config ./build/dist.config.js",
    "lib": "gulp",
    "release": "npm run dist && npm run lib"
  },
  "version": "2.0.0"
}
